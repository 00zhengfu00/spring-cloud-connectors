apply plugin: 'base'

description = "Spring Cloud"
		
buildscript {
    repositories {
        maven { url 'http://repo.springsource.org/plugins-release' }
    }
    dependencies {
        classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.5'
    }
}

ext {
    springVersion = "3.0.7.RELEASE"
    tomcatVersion = "7.0.53"

    springAmqpVersion = "1.2.1.RELEASE"
    springDataRedisVersion = "1.2.0.RELEASE"
    springDataMongoVersion = "1.4.0.RELEASE"
    
    jedisVersion = "2.4.1"

    commonDbcpVersion = "1.4"
    commonDbcp2Version = "2.0"

    mysqlDriverVersion = "5.1.29"
    mariadbDriverVersion = "1.1.3"
    postgresDriverVersion = "9.0-801.jdbc4"
    javaxMailVersion = "1.4.7"
    cglibVersion = "3.1"

    jacksonVersion = "2.3.3"

    log4jVersion = "1.2.17"

    junitVersion = "4.11"
    mockitoVersion = "1.9.5"
    
	javadocLinks = [
		'http://docs.oracle.com/javase/7/docs/api/',
		'http://docs.oracle.com/javaee/6/api/',
		'http://docs.spring.io/spring/docs/current/javadoc-api/',
		'http://docs.spring.io/spring-amqp/docs/latest-ga/api/',
		'http://docs.spring.io/spring-data/data-mongo/docs/current/api/',
		'http://docs.spring.io/spring-data/data-redis/docs/current/api/'
	] as String[]    
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'eclipse'
    
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'

    apply from: "${rootProject.projectDir}/publish-maven.gradle"

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

	javadoc {
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = project.name
    }
    
    task packageSources(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
	task javadocJar(type: Jar) {
        classifier = "javadoc"
        from javadoc
    }    

    artifacts {
    		archives packageSources
    		archives javadocJar
    }

    dependencies {
        testCompile("junit:junit:$junitVersion")
        testCompile("org.mockito:mockito-core:$mockitoVersion")
    }
    
	repositories {
	    mavenLocal()

	    maven { url "http://repo.spring.io/snapshot" }
	    maven { url "http://repo.spring.io/milestone" }
	    maven { url "http://repo.spring.io/libs-milestone" }
	    maven { url "http://repo.maven.apache.org/maven2" }
	}
}

configure(rootProject) {
	task schemaZip(type: Zip) {
		group = 'Distribution'
		classifier = 'schema'
		description = "Builds -${classifier} archive containing all " +
			"XSDs for deployment at static.springframework.org/schema."
	
		subprojects.each { subproject ->
			def Properties schemas = new Properties();
			def shortName = subproject.name
	
			subproject.sourceSets.main.resources.find {
				it.path.endsWith('META-INF/spring.schemas')
			}?.withInputStream { schemas.load(it) }
	
			for (def key : schemas.keySet()) {
				File xsdFile = subproject.sourceSets.main.resources.find {
					it.path.endsWith(schemas.get(key))
				}
				assert xsdFile != null
				into ("cloud") {
					from xsdFile.path
				}
			}
		}
	}
	
	task api(type: Javadoc) {
        group = "Documentation"
        description = "Generates aggregated Javadoc API documentation."
        title = "${rootProject.description} ${version} API"
        options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
        options.author = true
        options.header = rootProject.description
        options.links(project.ext.javadocLinks)

        source subprojects.collect { project ->
            project.sourceSets.main.allJava
        }

        classpath = files(subprojects.collect { project ->
            project.sourceSets.main.compileClasspath
        })

        maxMemory = "1024m"
        destinationDir = new File(buildDir, "api")
    }	
	
	task docsZip(type: Zip) {
		group = 'Distribution'
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference " +
			"for deployment at docs.spring.io/spring-cloud/docs."

		from (api) {
			into 'api'
		}
	}
	
	artifacts {
		archives docsZip	
		archives schemaZip
	}
}

task dist(dependsOn: assemble) {
	group = 'Distribution'
	description = 'Builds -dist, -docs and -schema distribution archives.'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}